package Analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;

// /////////////////////// CODIGO JAVA
parser code
{:
    public ArrayList<M_Expresion> lista_ER = new ArrayList<M_Expresion>(); //para er completas

//--------MANEJO DE ERRORES SINTACTICOS----
    public ArrayList<M_Error> errores_s = new ArrayList<M_Error>(); 

    public void syntax_error(Symbol s){
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
        
        M_Error er = new M_Error("Sintactico",s.value.toString(),"El analizador sint no esperaba: "+s.value.toString(),s.left,s.right);
        errores_s.add(er);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value +
        " no reconocido.");
    } 
:}


/* ///////////////////// DECLARACIONES ////////////////////// */

// DECLARACION  TERMINALES proyec1 ---------------------------
terminal String conj,llavea,llavec,dospuntos,flechad,ptcoma,porcentajed;
terminal String concat,or,asterisco,suma,interrogacion,guion,coma;
terminal String entero,decimal,cadena,cadena2,id,simbolo;

// DECLARACION NO TERMINALES proyec1 --------------------------
non terminal INICIO,OLC;
non terminal CUER_OLC,SEC_TOKEN,CUER_OLC2,TOKEN,SEC_LEXEMA,LEXEMA,SEC_COMPARA,ENTRADA;
non terminal NOTACION,NOT_RANGO,NOT_VARIOS,NOT_VARIOS2;
non terminal M_Expresion EXP;

// PRESEDENCIA ----------------------------------------
/*
precedence left suma,resta;
precedence left multiplicacion,division;
precedence left potencia,modulo;
precedence left igualacion,diferencia,menorq,mayorq,menorigual,mayorigual;
precedence left andd,orr;
*/
/* ////////////////// GRAMATICA PROYECTO1//////////////////////// */
start with INICIO;
INICIO ::= OLC;

OLC ::= llavea CUER_OLC llavec;

CUER_OLC ::= SEC_TOKEN CUER_OLC2;

// ---------------- Seccion token -----------------------------------

SEC_TOKEN ::= SEC_TOKEN TOKEN
            | TOKEN;

//TOKEN ::= conj dospuntos id flechad ptcoma;

TOKEN ::= conj dospuntos id flechad NOTACION ptcoma;

NOTACION ::= NOT_RANGO
          | NOT_VARIOS;

NOT_RANGO ::= id guion id
           |  entero guion entero
           |  cadena guion simbolo //haciendo atajo,asumo viene solo es espacio
           |  simbolo guion simbolo;


NOT_VARIOS ::= id coma NOT_VARIOS 
            |  entero coma NOT_VARIOS //---haciendo atajo ,asumiendo siempre bienen numeros seguidos
            |  simbolo coma NOT_VARIOS //---haciendo atajo ,asumiendo siempre bienen simbolos seguidos

            |  NOT_VARIOS2; //puede ser aqui id ptcoma
     

NOT_VARIOS2 ::= id
            | entero
            | simbolo;

//---------------- CUER_OLC2 -----------------------------

CUER_OLC2 ::= SEC_LEXEMA porcentajed porcentajed SEC_COMPARA;

SEC_LEXEMA ::= SEC_LEXEMA LEXEMA
            |  LEXEMA;

//---------------- seccion Expresiones regulares----------------------

//tip:se pueden poner variables a los terminales
//  ER
LEXEMA ::= id:var0 flechad EXP:var1 ptcoma
        {:
            System.out.println("se analizo una ER");
            M_Expresion m_expresion = new M_Expresion(var0,var1);
            lista_ER.add(m_expresion); //voy agregando cada Expresion Reg
            
         :};

//falta:llenar la lista_patrones
EXP ::= concat:var0 EXP:var1 EXP:var2
     {: M_Expresion m_expresion = new M_Expresion(var0,var1,var2);  RESULT = m_expresion; :}
     |  or:var0 EXP:var1 EXP:var2
     {: M_Expresion m_expresion = new M_Expresion(var0,var1,var2);  RESULT = m_expresion; :}
     |  asterisco:var0 EXP:var1
     {: M_Expresion m_expresion = new M_Expresion(var0,var1,null);  RESULT = m_expresion; :}
     |  suma:var0 EXP:var1
     {: M_Expresion m_expresion = new M_Expresion(var0,var1,null);  RESULT = m_expresion; :}
     |  interrogacion:var0 EXP:var1
     {: M_Expresion m_expresion = new M_Expresion(var0,var1,null);  RESULT = m_expresion; :}
     |  cadena:var0
     {: M_Expresion m_expresion = new M_Expresion(var0.substring(1,var0.length()-1));  RESULT = m_expresion; :}
     |  llavea id:var0 llavec
     {: M_Expresion m_expresion = new M_Expresion(var0);  RESULT = m_expresion; :};

//--------------- seccion comparar ----------------------

SEC_COMPARA ::= SEC_COMPARA ENTRADA
             | ENTRADA;

ENTRADA ::= id dospuntos cadena ptcoma; 
